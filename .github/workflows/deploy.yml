name: Test and Deploy to PyPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          python -m unittest discover tests

  bump-version:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Bump version and create Pull Request
        id: bump_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Bumping version..."
          current_version=$(python setup.py --version)
          echo "Current version: $current_version"
          new_version=$(python -c "from packaging.version import Version; ver=Version('$current_version'); print(f'{ver.major}.{ver.minor + 1}.0')")
          echo "New version: $new_version"
          sed -i "s/version=\"$current_version\"/version=\"$new_version\"/" setup.py
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git checkout -b bump-version-$new_version
          git commit -am "Bump version to $new_version"
          git push origin bump-version-$new_version
          gh pr create --title "Bump version to $new_version" --body "This PR bumps the version to $new_version"

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    environment: pypi

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
